{"version":3,"file":"static/js/888.8e23a935.chunk.js","mappings":"qPACA,EAA+B,mCAA/B,EAA8E,gCAA9E,EAA2H,iCAA3H,EAA4K,oCAA5K,EAAuN,2BAAvN,EAA+P,iC,kBCuE/P,EAnEqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MAcjB,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEOC,EAAAA,EAAAA,IAAUT,GAFjB,OAEbU,EAFa,OAGnBN,EAAaM,GAHM,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDAQpBJ,GACD,GAAE,CAACR,KAGF,iCACE,SAAC,KAAD,CAAMa,GAAE,iBAAER,QAAF,IAAEA,GAAF,UAAEA,EAAUS,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,UAAnC,UACE,mBAAQC,UAAWC,EAAcC,KAAK,SAAtC,4BAIDf,IACC,iBAAKa,UAAWC,EAAhB,WACE,gBACEE,MAAM,QACNC,IAAK,kCAAoCjB,EAAUkB,YACnDC,IAAKnB,EAAUoB,kBAEjB,iBAAKP,UAAWC,EAAhB,WACE,0BACGd,EAAUqB,MADb,KACsBrB,EAAUsB,aAAaC,MAAM,EAAG,GADtD,QAGA,wCAAgBvB,EAAUwB,eAC1B,sCACA,uBAAIxB,EAAUyB,YACd,oCACA,eAAIZ,UAAWC,EAAf,SACGd,EAAU0B,OAAOC,KAAI,SAAAC,GAAK,OACzB,eAAIf,UAAWC,EAAf,SACGc,EAAMC,MADwBD,EAAME,GADd,aASnC,mBACA,4BACE,eAAIjB,UAAWC,EAAf,qCACA,gBAAID,UAAWC,EAAf,WACE,eAAID,UAAWC,EAAf,UACE,SAAC,KAAD,CAAMJ,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,mBACA,SAAC,KAAD,SAIP,C,uKCpEKqB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,oGACFD,EAAAA,EAAAA,IAAA,qCAAwCD,IADtC,cACnBG,EADmB,yBAElBA,EAASC,KAAKC,SAFI,2CAAH,qDAKbC,EAAY,mCAAG,WAAMC,GAAN,uFACDN,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,4DAA6FO,IAD5F,cAClBJ,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKZ9B,EAAS,mCAAG,WAAMT,GAAN,uFACEmC,EAAAA,EAAAA,IAAA,gBAAmBnC,EAAnB,oBAAsCkC,EAAtC,oBADF,cACfG,EADe,yBAEdA,EAASC,MAFK,2CAAH,sDAKTI,EAAW,mCAAG,WAAM1C,GAAN,uFACFmC,EAAAA,EAAAA,IAAA,gBACZnC,EADY,4BACekC,EADf,oBADE,cACnBG,EADmB,yBAIlBA,EAASC,KAAKK,MAJI,2CAAH,sDAOXC,EAAY,mCAAG,WAAM5C,GAAN,uFACHmC,EAAAA,EAAAA,IAAA,gBACZnC,EADY,4BACekC,EADf,2BADG,cACpBG,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAQZM,EAAW,CACpBT,cAAAA,EACAI,aAAAA,EACA/B,UAAAA,EACAiC,YAAAA,EACAE,aAAAA,E","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieDetalis\":\"MovieDetails_movieDetalis__O6Jjg\",\"genreList\":\"MovieDetails_genreList__Bg3ig\",\"buttonBack\":\"MovieDetails_buttonBack__rRdDS\",\"cast__reviews\":\"MovieDetails_cast__reviews__SvFAv\",\"cast\":\"MovieDetails_cast__DSRRH\",\"additional\":\"MovieDetails_additional__EaCvI\"};","import { useEffect, useState } from 'react';\nimport { useLocation, Link, useParams, Outlet } from 'react-router-dom';\nimport s from './MovieDetails.module.css';\nimport { fetchById } from 'services/api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const onDetalisMovie = async () => {\n      try {\n        const detalyMovie = await fetchById(movieId);\n        setMovieInfo(detalyMovie);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    onDetalisMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/movies'}>\n        <button className={s.buttonBack} type=\"button\">\n          Back to Home\n        </button>\n      </Link>\n      {movieInfo && (\n        <div className={s.movieDetalis}>\n          <img\n            width=\"300px\"\n            src={'https://image.tmdb.org/t/p/w500' + movieInfo.poster_path}\n            alt={movieInfo.original_title}\n          />\n          <div className={s.genreList}>\n            <h1>\n              {movieInfo.title} ({movieInfo.release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {movieInfo.popularity}</p>\n            <h2>Overview</h2>\n            <p>{movieInfo.overview}</p>\n            <h2>Genres</h2>\n            <ul className={s.genreList}>\n              {movieInfo.genres.map(genre => (\n                <li className={s.genreList} key={genre.id}>\n                  {genre.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n      <hr />\n      <div>\n        <h3 className={s.additional}>Additional information</h3>\n        <ul className={s.cast__reviews}>\n          <li className={s.cast}>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <hr />\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'eb7c9132ba6734f59534fa5b6e14e667';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchByQuery = async query => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n    return response.data.results;\n};\n\nexport const fetchById = async movieId => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n  \n\nexport const allFetch = {\n    fetchTrending,\n    fetchByQuery,\n    fetchById,\n    fetchActors,\n    fetchReviews,\n};\n\n"],"names":["movieId","useParams","useState","movieInfo","setMovieInfo","location","useLocation","useEffect","onDetalisMovie","fetchById","detalyMovie","console","log","to","state","from","className","s","type","width","src","poster_path","alt","original_title","title","release_date","slice","popularity","overview","genres","map","genre","name","id","API_KEY","axios","fetchTrending","response","data","results","fetchByQuery","query","fetchActors","cast","fetchReviews","allFetch"],"sourceRoot":""}